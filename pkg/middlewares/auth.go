package middlewares

import (
	"Marketplace/pkg/services"
	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt/v5"
	"strings"
)

func JWTMiddleware() fiber.Handler {
	return func(c *fiber.Ctx) error {
		tokenString := c.Get("Authorization")

		if tokenString == "" || strings.HasPrefix(tokenString, "Bearer ") {
			return c.Next()
		}
		tokenString, _ = strings.CutPrefix(tokenString, "Bearer ")

		token, err := jwt.Parse(tokenString, services.TokenFunc)

		if err != nil || !token.Valid {
			return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
				"error": "Invalid or expired token",
			})
		}

		return c.Next()
	}
}

//
//func main() {
//	app := fiber.New()
//
//	// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
//	app.Use(logger.New())
//
//	// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS
//	app.Use(cors.New())
//
//	// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ JWTMiddleware
//	app.Use(JWTMiddleware())
//
//	app.Get("/", func(c *fiber.Ctx) error {
//		return c.SendString("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
//	})
//
//	log.Fatal(app.Listen(":3000"))
//}
//–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ middleware JWTMiddleware() –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞).
//
//–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å "YOUR_SECRET_KEY" –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.üßêüîí
